#include <xtd/diagnostics/debugger>
#include <xtd/forms/animation>
#include <xtd/forms/form>
#include <xtd/tunit/assert>
#include <xtd/tunit/test_class_attribute>
#include <xtd/tunit/test_method_attribute>

using namespace xtd;
using namespace xtd::drawing;
using namespace xtd::forms;
using namespace xtd::tunit;

namespace xtd::forms::tests {
  class test_class_(animation_tests) {
    class animation_for_test : public animation {
    public:
      animation_for_test() = default;
      
      using animation::default_back_color;
      using animation::default_cursor;
      using animation::default_font;
      using animation::default_fore_color;
      using animation::default_size;
    };
    
    void test_method_(constructor) {
      animation_for_test animation;
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::are_equal(animation.default_size().height(), animation.bottom(), csf_);
      assert::are_equal(drawing::rectangle({0, 0}, animation.default_size()), animation.bounds(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal(drawing::rectangle({0, 0}, animation.default_size()), animation.client_rectangle(), csf_);
      assert::are_equal(animation.default_size(), animation.client_size(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_false(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.default_back_color(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.default_cursor(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.default_font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.default_fore_color(), csf_);
      assert::are_equal(animation.default_size(), animation.default_size(), csf_);
      assert::are_equal(drawing::rectangle({0, 0}, animation.default_size()), animation.display_rectangle(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_zero(animation.handle(), csf_);
      assert::are_equal(animation.default_size().height(), animation.height(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_false(animation.is_handle_created(), csf_);
      assert::is_zero(animation.left(), csf_);
      assert::are_equal(drawing::point::empty, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::is_null(animation.parent(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::are_equal(animation.default_size().width(), animation.right(), csf_);
      assert::are_equal(animation.default_size(), animation.size(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_zero(animation.toolkit_handle(), csf_);
      assert::is_zero(animation.top(), csf_);
      assert::is_null(animation.top_level_control(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(animation.default_size().width(), animation.width(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);

      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(10, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create) {
      auto animation = forms::animation::create();
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_false(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_zero(animation.handle(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_false(animation.is_handle_created(), csf_);
      assert::is_zero(animation.left(), csf_);
      assert::are_equal(drawing::point::empty, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::is_null(animation.parent(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_zero(animation.toolkit_handle(), csf_);
      assert::is_zero(animation.top(), csf_);
      assert::is_null(animation.top_level_control(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(10, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_frame_per_second) {
      auto animation = forms::animation::create(60);
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_false(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_zero(animation.handle(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_false(animation.is_handle_created(), csf_);
      assert::is_zero(animation.left(), csf_);
      assert::are_equal(drawing::point::empty, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::is_null(animation.parent(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_zero(animation.toolkit_handle(), csf_);
      assert::is_zero(animation.top(), csf_);
      assert::is_null(animation.top_level_control(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_frame_per_second_and_location) {
      auto animation = forms::animation::create(60, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_false(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_zero(animation.handle(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_false(animation.is_handle_created(), csf_);
      assert::are_equal(10, animation.left(), csf_);
      assert::are_equal(point {10, 20}, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::is_null(animation.parent(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_zero(animation.toolkit_handle(), csf_);
      assert::are_equal(20, animation.top(), csf_);
      assert::is_null(animation.top_level_control(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_frame_per_second_location_and_size) {
      auto animation = forms::animation::create(60, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_false(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_zero(animation.handle(), csf_);
      assert::are_equal(40, animation.height(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_false(animation.is_handle_created(), csf_);
      assert::are_equal(10, animation.left(), csf_);
      assert::are_equal(point {10, 20}, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::is_null(animation.parent(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::are_equal(drawing::size {30, 40}, animation.size(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_zero(animation.toolkit_handle(), csf_);
      assert::are_equal(20, animation.top(), csf_);
      assert::is_null(animation.top_level_control(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(30, animation.width(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_frame_per_second_location_size_and_name) {
      auto animation = forms::animation::create(60, {10, 20}, {30, 40}, "animation");
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_false(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_zero(animation.handle(), csf_);
      assert::are_equal(40, animation.height(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_false(animation.is_handle_created(), csf_);
      assert::are_equal(10, animation.left(), csf_);
      assert::are_equal(point {10, 20}, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_zero(animation.native_handle(), csf_);
      assert::are_equal("animation", animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::is_null(animation.parent(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::are_equal(drawing::size {30, 40}, animation.size(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_zero(animation.toolkit_handle(), csf_);
      assert::are_equal(20, animation.top(), csf_);
      assert::is_null(animation.top_level_control(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(30, animation.width(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_parent) {
      auto form = forms::form::create();
      auto animation = forms::animation::create(form);
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_true(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_not_zero(animation.handle(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_true(animation.is_handle_created(), csf_);
      assert::is_zero(animation.left(), csf_);
      assert::are_equal(drawing::point::empty, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_not_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::are_same(form, animation.parent().value().get(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_not_zero(animation.toolkit_handle(), csf_);
      assert::is_zero(animation.top(), csf_);
      assert::are_same(form, animation.top_level_control().value().get(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(10, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_parent_and_frame_per_second) {
      auto form = forms::form::create();
      auto animation = forms::animation::create(form, 60);
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_true(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_not_zero(animation.handle(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_true(animation.is_handle_created(), csf_);
      assert::is_zero(animation.left(), csf_);
      assert::are_equal(drawing::point::empty, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_not_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::are_same(form, animation.parent().value().get(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_not_zero(animation.toolkit_handle(), csf_);
      assert::is_zero(animation.top(), csf_);
      assert::are_same(form, animation.top_level_control().value().get(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_parent_frame_per_second_and_location) {
      auto form = forms::form::create();
      auto animation = forms::animation::create(form, 60, {10, 20});
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_true(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_not_zero(animation.handle(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_true(animation.is_handle_created(), csf_);
      assert::are_equal(10, animation.left(), csf_);
      assert::are_equal(point {10, 20}, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_not_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::are_same(form, animation.parent().value().get(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_not_zero(animation.toolkit_handle(), csf_);
      assert::are_equal(20, animation.top(), csf_);
      assert::are_same(form, animation.top_level_control().value().get(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_parent_frame_per_second_location_and_size) {
      auto form = forms::form::create();
      auto animation = forms::animation::create(form, 60, {10, 20}, {30, 40});
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_true(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_not_zero(animation.handle(), csf_);
      assert::are_equal(40, animation.height(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_true(animation.is_handle_created(), csf_);
      assert::are_equal(10, animation.left(), csf_);
      assert::are_equal(point {10, 20}, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_not_zero(animation.native_handle(), csf_);
      assert::is_empty(animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::are_same(form, animation.parent().value().get(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::are_equal(drawing::size {30, 40}, animation.size(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_not_zero(animation.toolkit_handle(), csf_);
      assert::are_equal(20, animation.top(), csf_);
      assert::are_same(form, animation.top_level_control().value().get(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(30, animation.width(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
    
    void test_method_(create_with_parent_frame_per_second_location_size_and_name) {
      auto form = forms::form::create();
      auto animation = forms::animation::create(form, 60, {10, 20}, {30, 40}, "animation");
      assert::are_equal(anchor_styles::left | anchor_styles::top, animation.anchor(), csf_);
      assert::are_equal(drawing::point::empty, animation.auto_scroll_point(), csf_);
      assert::is_false(animation.auto_size(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control(), animation.back_color(), csf_);
      assert::are_equal(drawing::image::empty, animation.background_image(), csf_);
      assert::are_equal(image_layout::tile, animation.background_image_layout(), csf_);
      assert::is_false(animation.can_focus(), csf_);
      assert::is_true(animation.can_raise_events(), csf_);
      assert::is_true(animation.can_select(), csf_);
      assert::are_equal("Gammasoft", animation.company_name(), csf_);
      assert::is_null(animation.context_menu(), csf_);
      assert::are_equal(forms::control_appearance::standard, animation.control_appearance(), csf_);
      assert::is_empty(animation.controls(), csf_);
      assert::is_true(animation.created(), csf_);
      assert::are_equal(forms::cursors::default_cursor(), animation.cursor(), csf_);
      assert::are_equal(forms::dock_style::none, animation.dock(), csf_);
      assert::is_true(animation.double_buffered(), csf_);
      assert::is_true(animation.enabled(), csf_);
      assert::is_false(animation.focused(), csf_);
      assert::are_equal(drawing::system_fonts::default_font(), animation.font(), csf_);
      assert::are_equal(style_sheets::style_sheet::current_style_sheet().system_colors().control_text(), animation.fore_color(), csf_);
      assert::is_not_zero(animation.handle(), csf_);
      assert::are_equal(40, animation.height(), csf_);
      assert::is_false(animation.invoke_required(), csf_);
      assert::is_true(animation.is_handle_created(), csf_);
      assert::are_equal(10, animation.left(), csf_);
      assert::are_equal(point {10, 20}, animation.location(), csf_);
      assert::are_equal(forms::padding(3), animation.margin(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.maximum_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_client_size(), csf_);
      assert::are_equal(drawing::size::empty, animation.minimum_size(), csf_);
      assert::is_not_zero(animation.native_handle(), csf_);
      assert::are_equal("animation", animation.name(), csf_);
      assert::are_equal(forms::padding(0), animation.padding(), csf_);
      assert::are_same(form, animation.parent().value().get(), csf_);
      assert::are_equal("xtd", animation.product_name(), csf_);
      assert::is_not_zero(animation.region().handle(), csf_);
      assert::are_equal(drawing::size {30, 40}, animation.size(), csf_);
      assert::is_empty(animation.style_sheet().theme().name(), csf_);
      assert::is_true(animation.tab_stop(), csf_);
      assert::is_false(animation.tag().has_value(), csf_);
      assert::is_empty(animation.text(), csf_);
      assert::is_not_zero(animation.toolkit_handle(), csf_);
      assert::are_equal(20, animation.top(), csf_);
      assert::are_same(form, animation.top_level_control().value().get(), csf_);
      assert::is_true(animation.visible(), csf_);
      assert::are_equal(30, animation.width(), csf_);
      assert::are_equal(diagnostics::debugger::is_attached(), forms::control::check_for_illegal_cross_thread_calls(), csf_);
      assert::are_equal(keys::none, forms::control::modifier_keys(), csf_);
      assert::are_equal(forms::mouse_buttons::none, forms::control::mouse_buttons(), csf_);
      // The following test may fail: The user can place the mouse in the upper left position of the screen {0, 0}...
      // assert::are_not_equal(drawing::point::empty, forms::control::mouse_position(), csf_);
      
      assert::is_zero(animation.elapsed(), csf_);
      assert::is_zero(animation.elapsed_milliseconds(), csf_);
      assert::is_zero(animation.elapsed_nanoseconds(), csf_);
      assert::is_zero(animation.elapsed_ticks(), csf_);
      assert::is_zero(animation.frame_counter(), csf_);
      assert::are_equal(60, animation.frames_per_second(), csf_);
      assert::is_false(animation.running(), csf_);
    }
  };
}
